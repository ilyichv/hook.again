// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const Index: Record<string, any> = {
    "use-copy-to-clipboard": {
      name: "use-copy-to-clipboard",
      description: "A hook that allows you to copy text to the clipboard.",
      type: "registry:hook",
      registryDependencies: undefined,
      files: ["registry/hooks/use-copy-to-clipboard.ts"],
      component: React.lazy(() => import("@/registry/hooks/use-copy-to-clipboard.ts")),
      source: "",
      category: "",
      subcategory: "",
      chunks: []
    },
    "use-debounced-callback": {
      name: "use-debounced-callback",
      description: "A hook that debounces a callback.",
      type: "registry:hook",
      registryDependencies: undefined,
      files: ["registry/hooks/use-debounced-callback.ts"],
      component: React.lazy(() => import("@/registry/hooks/use-debounced-callback.ts")),
      source: "",
      category: "",
      subcategory: "",
      chunks: []
    },
    "use-interval": {
      name: "use-interval",
      description: "A hook that runs a callback at a given interval.",
      type: "registry:hook",
      registryDependencies: undefined,
      files: ["registry/hooks/use-interval.ts"],
      component: React.lazy(() => import("@/registry/hooks/use-interval.ts")),
      source: "",
      category: "",
      subcategory: "",
      chunks: []
    },
    "use-debounced-value": {
      name: "use-debounced-value",
      description: "A hook that debounces a value.",
      type: "registry:hook",
      registryDependencies: undefined,
      files: ["registry/hooks/use-debounced-value.ts"],
      component: React.lazy(() => import("@/registry/hooks/use-debounced-value.ts")),
      source: "",
      category: "",
      subcategory: "",
      chunks: []
    },
    "use-local-storage": {
      name: "use-local-storage",
      description: "A hook that allows you to store and retrieve values from local storage.",
      type: "registry:hook",
      registryDependencies: undefined,
      files: ["registry/hooks/use-local-storage.ts"],
      component: React.lazy(() => import("@/registry/hooks/use-local-storage.ts")),
      source: "",
      category: "",
      subcategory: "",
      chunks: []
    },
    "use-media-query": {
      name: "use-media-query",
      description: "A hook that provides a way to detect if a media query matches the current viewport.",
      type: "registry:hook",
      registryDependencies: undefined,
      files: ["registry/hooks/use-media-query.ts"],
      component: React.lazy(() => import("@/registry/hooks/use-media-query.ts")),
      source: "",
      category: "",
      subcategory: "",
      chunks: []
    },
}
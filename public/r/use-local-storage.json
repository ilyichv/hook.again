{
  "name": "use-local-storage",
  "type": "registry:hook",
  "dependencies": [],
  "files": [
    {
      "path": "hooks/use-local-storage.ts",
      "content": "import * as React from \"react\";\n\nexport function useLocalStorage<T>(\n\tkey: string,\n\tinitialValue: T,\n): [T, (value: T | ((prev: T) => T)) => void] {\n\tconst parseJSON = (value: string | null) => {\n\t\ttry {\n\t\t\treturn value ? JSON.parse(value) : null;\n\t\t} catch (error) {\n\t\t\tconsole.warn(\"Failed to parse localStorage value\", error);\n\t\t\treturn null;\n\t\t}\n\t};\n\n\tconst [storedValue, setStoredValue] = React.useState<T>(() => {\n\t\tconst item = window.localStorage.getItem(key);\n\t\treturn item !== null ? (parseJSON(item) ?? initialValue) : initialValue;\n\t});\n\n\tconst setValue = React.useCallback(\n\t\t(value: T | ((prev: T) => T)) => {\n\t\t\tsetStoredValue((prev) => {\n\t\t\t\tconst newValue = value instanceof Function ? value(prev) : value;\n\t\t\t\twindow.localStorage.setItem(key, JSON.stringify(newValue));\n\t\t\t\treturn newValue;\n\t\t\t});\n\t\t},\n\t\t[key],\n\t);\n\n\tReact.useEffect(() => {\n\t\tconst handleStorageChange = (event: StorageEvent) => {\n\t\t\tif (event.key === key) {\n\t\t\t\tsetStoredValue(\n\t\t\t\t\tevent.newValue\n\t\t\t\t\t\t? (parseJSON(event.newValue) ?? initialValue)\n\t\t\t\t\t\t: initialValue,\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t\twindow.addEventListener(\"storage\", handleStorageChange);\n\t\treturn () => {\n\t\t\twindow.removeEventListener(\"storage\", handleStorageChange);\n\t\t};\n\t}, [key, initialValue]);\n\n\treturn [storedValue, setValue];\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}